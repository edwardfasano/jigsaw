#!/usr/bin/env php
<?php

use Illuminate\View\Factory;
use TightenCo\Jigsaw\Jigsaw;
use TightenCo\Jigsaw\DataLoader;
use TightenCo\Jigsaw\Filesystem;
use TightenCo\Jigsaw\SiteBuilder;
use Illuminate\Container\Container;
use Illuminate\View\FileViewFinder;
use TightenCo\Jigsaw\FrontMatterParser;
use TightenCo\Jigsaw\CollectionPaginator;
use TightenCo\Jigsaw\Console\InitCommand;
use TightenCo\Jigsaw\TemporaryFilesystem;
use TightenCo\Jigsaw\CollectionDataLoader;
use TightenCo\Jigsaw\Console\BuildCommand;
use TightenCo\Jigsaw\Console\ServeCommand;
use Illuminate\Contracts\Events\Dispatcher;
use Illuminate\View\Engines\CompilerEngine;
use Illuminate\View\Engines\EngineResolver;
use TightenCo\Jigsaw\Handlers\BladeHandler;
use Illuminate\View\Compilers\BladeCompiler;
use TightenCo\Jigsaw\BasicOutputPathResolver;
use TightenCo\Jigsaw\Handlers\DefaultHandler;
use TightenCo\Jigsaw\Handlers\IgnoredHandler;
use TightenCo\Jigsaw\Handlers\MarkdownHandler;
use TightenCo\Jigsaw\Handlers\PaginatedPageHandler;
use TightenCo\Jigsaw\Handlers\CollectionItemHandler;
use TightenCo\Jigsaw\CollectionHandlers\MarkdownCollectionItemHandler;

if (file_exists(__DIR__.'/vendor/autoload.php')) {
    require __DIR__.'/vendor/autoload.php';
} else {
    require __DIR__.'/../../autoload.php';
}

// Config
$cachePath = getcwd() . '/_tmp';
$buildPath = getcwd() . '/build';
$sourcePath = getcwd() . '/source';

$container = new Container;

$container->bind(Factory::class, function ($c) use ($cachePath, $sourcePath) {
    $resolver = new EngineResolver;

    $resolver->register('blade', function () use ($cachePath) {
        $compiler = new BladeCompiler(new Filesystem, $cachePath);
        return new CompilerEngine($compiler, new Filesystem);
    });

    $finder = new FileViewFinder(new Filesystem, [$sourcePath]);
    return new Factory($resolver, $finder, Mockery::mock(Dispatcher::class)->shouldIgnoreMissing());
});

$container->bind(BladeHandler::class, function ($c) {
    return new BladeHandler($c[Factory::class]);
});

$container->bind(TemporaryFilesystem::class, function ($c) use ($cachePath) {
    return new TemporaryFilesystem($cachePath);
});

$container->bind(MarkdownHandler::class, function ($c) {
    return new MarkdownHandler($c[TemporaryFilesystem::class], $c[Factory::class]);
});

if (! file_exists(getcwd() . '/collections.php')) {
    $collectionSettings = [];
} else {
    $collectionSettings = include getcwd() . '/collections.php';
}

$container->instance('cwd', getcwd());
$container->instance('collectionSettings', $collectionSettings);

$container->bind('outputPathResolver', function ($c ) {
    return new BasicOutputPathResolver;
});

$container->bind(CollectionDataLoader::class, function ($c) {
    return new CollectionDataLoader($c['collectionSettings'], new Filesystem, $c['outputPathResolver'], [new MarkdownCollectionItemHandler]);
});

$container->bind(DataLoader::class, function ($c) {
    return new DataLoader($c['cwd'], $c[CollectionDataLoader::class]);
});

$container->bind(CollectionItemHandler::class, function ($c) {
    return new CollectionItemHandler($c['collectionSettings'], $c['outputPathResolver'], [$c[MarkdownHandler::class]]);
});

$container->bind(CollectionPaginator::class, function ($c) {
    return new CollectionPaginator($c['outputPathResolver']);
});

$container->bind(PaginatedPageHandler::class, function ($c) {
    return new PaginatedPageHandler($c[CollectionPaginator::class], $c[Factory::class], $c[FrontMatterParser::class], $c[TemporaryFilesystem::class]);
});

$container->bind(SiteBuilder::class, function ($c) use ($cachePath) {
    return new SiteBuilder(new Filesystem, $cachePath, $c['outputPathResolver'], [
        // @todo: Write and stick a pagination handler at the top of this stack
        $c[PaginatedPageHandler::class],
        $c[CollectionItemHandler::class],
        new IgnoredHandler,
        $c[MarkdownHandler::class],
        $c[BladeHandler::class],
        $c[DefaultHandler::class],
    ]);
});

$container->bind(Jigsaw::class, function ($c) {
    return new Jigsaw($c[DataLoader::class], $c[SiteBuilder::class]);
});

$buildCommand = new BuildCommand($container, $sourcePath, $buildPath);

$app = new Symfony\Component\Console\Application('Jigsaw', '0.6.4');
$app->add($buildCommand);
$app->add($container[InitCommand::class]);
$app->add($container[ServeCommand::class]);
$app->run();
