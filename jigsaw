#!/usr/bin/env php
<?php

use Illuminate\Contracts\Events\Dispatcher;
use Illuminate\Filesystem\Filesystem;
use Illuminate\View\Compilers\BladeCompiler;
use Illuminate\View\Engines\CompilerEngine;
use Illuminate\View\Engines\EngineResolver;
use Illuminate\View\Factory;
use Illuminate\View\FileViewFinder;
use Jigsaw\Jigsaw\BladeHandler;
use Jigsaw\Jigsaw\Console\BuildCommand;
use Jigsaw\Jigsaw\DefaultHandler;
use Jigsaw\Jigsaw\Jigsaw;

if (file_exists(__DIR__.'/vendor/autoload.php')) {
    require __DIR__.'/vendor/autoload.php';
} else {
    require __DIR__.'/../../autoload.php';
}

class NullDispatcher implements Dispatcher
{
    public function listen($events, $listener, $priority = 0) {}
    public function hasListeners($eventName) {}
    public function until($event, $payload = array()) {}
    public function fire($event, $payload = array(), $halt = false) {}
    public function firing() {}
    public function forget($event) {}
    public function forgetPushed() {}
}

// Config
$cachePath = getcwd() . '/_tmp';
$buildPath = getcwd() . '/build';
$sourcePath = getcwd() . '/source';

// Build up blade engine
$resolver = new EngineResolver;

$resolver->register('blade', function () use ($cachePath) {
    $compiler = new BladeCompiler(new Filesystem, $cachePath);
    return new CompilerEngine($compiler, new Filesystem);
});

$finder = new FileViewFinder(new Filesystem, [$sourcePath]);
$factory = new Factory($resolver, $finder, new NullDispatcher);


$jigsaw = new Jigsaw(new Filesystem, $cachePath);

$jigsaw->registerHandler(new BladeHandler($factory));
$jigsaw->registerHandler(new DefaultHandler(new Filesystem));

$buildCommand = new BuildCommand($jigsaw, $sourcePath, $buildPath);

$app = new Symfony\Component\Console\Application('Jigsaw', '0.0.1');
$app->add($buildCommand);
$app->setDefaultCommand($buildCommand->getName());
$app->run();
