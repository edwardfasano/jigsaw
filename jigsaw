#!/usr/bin/env php
<?php

use Illuminate\View\Factory;
use TightenCo\Jigsaw\Jigsaw;
use TightenCo\Jigsaw\DataLoader;
use TightenCo\Jigsaw\Filesystem;
use TightenCo\Jigsaw\SiteBuilder;
use Illuminate\Container\Container;
use Illuminate\View\FileViewFinder;
use TightenCo\Jigsaw\Console\InitCommand;
use TightenCo\Jigsaw\TemporaryFilesystem;
use TightenCo\Jigsaw\CollectionDataLoader;
use TightenCo\Jigsaw\Console\BuildCommand;
use TightenCo\Jigsaw\Console\ServeCommand;
use Illuminate\Contracts\Events\Dispatcher;
use Illuminate\View\Engines\CompilerEngine;
use Illuminate\View\Engines\EngineResolver;
use TightenCo\Jigsaw\Handlers\BladeHandler;
use Illuminate\View\Compilers\BladeCompiler;
use TightenCo\Jigsaw\Handlers\DefaultHandler;
use TightenCo\Jigsaw\Handlers\IgnoredHandler;
use TightenCo\Jigsaw\Handlers\MarkdownHandler;
use TightenCo\Jigsaw\Handlers\CollectionItemHandler;
use TightenCo\Jigsaw\CollectionHandlers\MarkdownCollectionItemHandler;

if (file_exists(__DIR__.'/vendor/autoload.php')) {
    require __DIR__.'/vendor/autoload.php';
} else {
    require __DIR__.'/../../autoload.php';
}

// Config
$cachePath = getcwd() . '/_tmp';
$buildPath = getcwd() . '/build';
$sourcePath = getcwd() . '/source';

$container = new Container;

$container->bind(Factory::class, function ($c) use ($cachePath, $sourcePath) {
    $resolver = new EngineResolver;

    $resolver->register('blade', function () use ($cachePath) {
        $compiler = new BladeCompiler(new Filesystem, $cachePath);
        return new CompilerEngine($compiler, new Filesystem);
    });

    $finder = new FileViewFinder(new Filesystem, [$sourcePath]);
    return new Factory($resolver, $finder, Mockery::mock(Dispatcher::class)->shouldIgnoreMissing());
});

$container->bind(BladeHandler::class, function ($c) {
    return new BladeHandler($c[Factory::class]);
});

$container->bind(MarkdownHandler::class, function ($c) use ($cachePath) {
    $tempFilesystem = new TemporaryFilesystem($cachePath);
    return new MarkdownHandler($tempFilesystem, $c[Factory::class]);
});

if (! file_exists(getcwd() . '/collections.php')) {
    $collectionSettings = [];
} else {
    $collectionSettings = include getcwd() . '/collections.php';
}

$collectionDataLoader = new CollectionDataLoader($collectionSettings, new Filesystem, [new MarkdownCollectionItemHandler]);

$dataLoader = new DataLoader(getcwd(), $collectionDataLoader);

// Bootstrap Handlers
// Only supports Markdown right this second...
$collectionItemHandler = new CollectionItemHandler($collectionSettings, [$container[MarkdownHandler::class]]);

$handlers = [
    $collectionItemHandler,
    new IgnoredHandler,
    $container[MarkdownHandler::class],
    $container[MarkdownHandler::class],
    $container[BladeHandler::class],
    $container[DefaultHandler::class],
];



$container->bind('siteBuilderGenerator', function () use ($cachePath, $handlers) {
    return function ($source, $dest, $siteData, $options) use ($cachePath, $handlers) {
        return new SiteBuilder($source, $dest, $siteData, $options, new Filesystem, $cachePath, $handlers);
    };
});

$jigsaw = new Jigsaw($dataLoader, $container['siteBuilderGenerator']);

$buildCommand = new BuildCommand($jigsaw, $sourcePath, $buildPath);

$app = new Symfony\Component\Console\Application('Jigsaw', '0.6.4');
$app->add($buildCommand);
$app->add($container[InitCommand::class]);
$app->add($container[ServeCommand::class]);
$app->run();
